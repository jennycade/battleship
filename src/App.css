body {
  background-color: black;
  box-sizing: border-box;
  --boardsize: 5;
}

.App {
  text-align: center;
  perspective: 1000px;
  height: 100vh;
}
.gameboard {
  display: grid;
  grid-template-columns: calc(100% / ( var(--boardsize) + 1)) 1fr; /* TODO: refactor all uses of --boardsize into GameboardComponent */
  grid-template-rows: calc(100% / ( var(--boardsize) + 1)) 1fr;

  height: 50vh;
  width: 50vh;
  margin: 0 auto;
}
.xlabels {
  grid-column-start: 2;
  display: grid;
  grid-template-columns: repeat(var(--boardsize), 1fr);
}
.ylabels {
  grid-row-start: 2;
  display:grid;
  grid-template-rows: repeat(var(--boardsize), 1fr);
}

.pegs {
  display: grid;
  width: 100%;
  height: 100%;
  grid-template-columns: repeat(var(--boardsize), 1fr);
  grid-template-rows: repeat(var(--boardsize), 1fr);
}

.player {
  transform-style: preserve-3d;
  transform: rotateX(60deg);
  transform-origin: top;
}
.label {
  font-family: monospace;
  color: white;
  font-size: 1.5rem;

  display: flex;
  justify-content: center;
  align-items: center;
}

.peg {
  border: 1px solid white;
}

.opponent .peg:hover {
  background-color: #00ff00;
}

.player .peg:hover {
  background-color: aqua;
}

